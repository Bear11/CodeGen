########################################################################################
##
## Common variables:
##  $YEAR - yyyy
##  $TIME - yyyy-MM-dd HH:mm:ss
##  $USER - user.name
##
## Available variables:
##  $class0 - the context class, alias: $class
##  $ClassName - generate by the config of "Class Name", the generated class name
##
## Class Entry Structure:
##  $class.className - the class Name
##  $class.packageName - the packageName
##  $class.importList - the list of imported classes name
##  $class.fields - the list of the class fields
##          - type: the field type
##          - name: the field name
##          - modifier: the field modifier, like "private",or "@Setter private" if include annotations
##  $class.allFields - the list of the class fields include all fields of superclass
##          - type: the field type
##          - name: the field name
##          - modifier: the field modifier, like "private",or "@Setter private" if include annotations
##  $class.methods - the list of class methods
##          - name: the method name
##          - modifier: the method modifier, like "private static"
##          - returnType: the method returnType
##          - params: the method params, like "(String name)"
##  $class.allMethods - the list of class methods include all methods of superclass
##          - name: the method name
##          - modifier: the method modifier, like "private static"
##          - returnType: the method returnType
##          - params: the method params, like "(String name)"#
########################################################################################
#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end
package $class.PackageName;

#foreach($importer in $class.ImportList)
import $importer;
#end

/**
 * create by $USER in $TIME
 */
public class $ClassName {
#foreach($field in $class.Fields)
    /**
     * $field.comment
     */
    $field.modifier $field.Type $field.Name;
#end
    /**
     * getter and setter functions
     */
#foreach($field in $class.Fields)
    public ##
#if($field.modifierStatic)
static ##
#end
$field.type ##
#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project))))
#if ($field.boolean && $field.primitive)
is##
#else
get##
#end
#cap($field.Name)() {
  return $field.name;
}
    public ##
#if($field.modifierStatic)
static ##
#end
void ##
set#cap($field.Name)($field.type $field.name) {
   this.$field.name = $field.name;
}
#end
}
